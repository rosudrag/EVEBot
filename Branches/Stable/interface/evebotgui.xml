<?xml version="1.0" encoding="UTF-8"?>
<ISUI>
	<window name='EVEBot'>
		<Visible>1</Visible>
		<BackGroundColor></BackGroundColor>
		<Border>0</Border>
		<X>200</X>
		<Y>300</Y>
		<Width>550</Width>
		<Height>320</Height>
		<Title>EVEBot Options</Title>
		<TitleBar template='EVESkin.Window.TitleBar'>
			<Width>100%</Width>
			<Height>20</Height>
			<Border>0</Border>
			<Children>
				<commandbutton name='Run EVEBot' template='EVESkin.Window.TitleBar.RunButton'>
					<OnLeftClick>
						Script[EVEBot]:Resume
						Script[EVEBot].VariableScope.EVEBot:Resume
						Script[EVEBot].VariableScope.EVEBot.ReturnToStation:Set[FALSE]
						Echo EVEBot: Resumed
					</OnLeftClick>
				</commandbutton>
				<commandbutton name='Pause EVEBot' template='EVESkin.Window.TitleBar.PauseButton'>
					<OnLeftClick>
						EVE:Execute[CmdStopShip]
						Script[EVEBot]:Pause
						Script[EVEBot].VariableScope.EVEBot:Pause
						Echo EVEBot: Paused
					</OnLeftClick>
				</commandbutton>
				<Text name='EVEBot_TitleBar_Title' template='EVESkin.Font.TitleBar'>
					<X>200</X>
					<Y>3</Y>
					<Width>130</Width>
					<Height>20</Height>
					<Text>${Script[EVEBot].VariableScope.AppVersion}</Text>
					<OnLoad>
						This:SetText[${Script[EVEBot].VariableScope.AppVersion}]
					</OnLoad>
				</Text>
				<button	Name='Minimize'	template='EVESkin.Window.TitleBar.Minimize'>
					<OnLeftClick>
						UIElement[EVEBot].FindUsableChild[TitleBotStatus,Text]:Show
						UIElement[EVEBot].FindUsableChild[TitleBotStatusCap,Text]:Show
						UIElement[EVEBot].FindUsableChild[TitleBotXPStatus,Text]:Show
						UIElement[EVEBot].FindUsableChild[TitleBotXPCap,Text]:Show
					</OnLeftClick>
				</button>
				<button	Name='Maximize'	template='EVESkin.Window.TitleBar.Minimize'>
					<OnLeftClick>
						UIElement[EVEBot].FindUsableChild[TitleBotStatus,Text]:Hide
						UIElement[EVEBot].FindUsableChild[TitleBotXPStatus,Text]:Hide
						UIElement[EVEBot].FindUsableChild[TitleBotXPCap,Text]:Hide
						UIElement[EVEBot].FindUsableChild[TitleBotStatusCap,Text]:Hide
					</OnLeftClick>
				</button>
				<button	Name='Close' template='EVESkin.Window.TitleBar.Close'>
					<OnLeftClick>
						endscript EVEBot
					</OnLeftClick>
				</button>
			</Children>
		</TitleBar>
		<Children name="EVEBot_Children">
			<TabControl	Name='EVEBotOptionsTab' template='EVESkin.TabControl'>
				<X>0</X>
				<Y>4</Y>
				<Width>100%</Width>
				<Height>100%</Height>
				<Tabs>
					<Tab Name='Status'>
						<button	Name='BroadcastBreak' template='EveSkin.Window.ClickButton'>
							<text>Broadcast Break</text>
							<x>r160</x>
							<y>10</y>
							<width>150</width>
							<height>20</height>
							<OnLeftClick>
								relay all -event EVEBot_HARDSTOP
								Script[EVEBot].VariableScope.UI:UpdateConsole["Forcing Break!!!", LOG_MINOR]
							</OnLeftClick>
						</button>
						<button	Name='BroadcastResume' template='EveSkin.Window.ClickButton'>
							<text>Broadcast Resume</text>
							<x>r160</x>
							<y>30</y>
							<width>150</width>
							<height>20</height>
							<OnLeftClick>
								Social.NextBreak:Set[0]
								Social.OnBreak:Set[FALSE]
								relay all -event EVEBot_ABORTHARDSTOP
								Script[EVEBot].VariableScope.UI:UpdateConsole["Resuming from break!!!", LOG_MINOR]
							</OnLeftClick>
						</button>
						<button	Name='BroadcastRun' template='EveSkin.Window.ClickButton'>
							<text>Broadcast Run</text>
							<x>r160</x>
							<y>50</y>
							<width>150</width>
							<height>20</height>
							<OnLeftClick>
								relay all Script[EVEBot]:Resume
								relay all Script[EVEBot].VariableScope.EVEBot:Resume
							</OnLeftClick>
						</button>
						<button	Name='BroadcastResetBelts' template='EveSkin.Window.ClickButton'>
							<text>Reset Belts List</text>
							<x>r160</x>
							<y>70</y>
							<width>150</width>
							<height>20</height>
							<OnLeftClick>
								Script[Belts]:ResetBeltList
							</OnLeftClick>
						</button>
						<Text name='script_runtime'>
							<X>10</X>
							<Y>10</Y>
							<Width>115</Width>
							<Height>20</Height>
							<Text>Script Runtime:</Text>
						</Text>
						<Text name='script_runtime_data' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>10</Y>
							<Width>100</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.UI.Runtime}</Text>
						</Text>

						<Text name='state' template='EVESkin.Font.Description'>
							<X>10</X>
							<Y>25</Y>
							<Width>100</Width>
							<Height>20</Height>
							<Text>Action:</Text>
						</Text>
						<Text name='state_data' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>25</Y>
							<Width>100</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.Config.Common.BotModeName}</Text>
						</Text>
						<Text name='Currently Training' template='EVESkin.Font.Description'>
							<X>10</X>
							<Y>40</Y>
							<Width>175</Width>
							<Height>20</Height>
							<Text>Currently Training:</Text>
						</Text>
						<Text name='CurrentlyTrainingDATA' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>40</Y>
							<Width>150</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.Skills.CurrentlyTrainingSkill}</Text>
						</Text>
						<Text name='Next to be trained' template='EVESkin.Font.Description'>
							<X>10</X>
							<Y>55</Y>
							<Width>175</Width>
							<Height>20</Height>
							<Text>Next Queued:</Text>
						</Text>
						<Text name='nexttobetrainedDATA' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>55</Y>
							<Width>150</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.Skills.NextInLine}</Text>
						</Text>
						<Text name='Current Timestamp' template='EVESkin.Font.Description'>
							<X>10</X>
							<Y>80</Y>
							<Width>175</Width>
							<Height>20</Height>
							<Text>Current Timestamp:</Text>
						</Text>
						<Text name='CurrentTimestampDATA' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>80</Y>
							<Width>150</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.Social.CurrentTime}</Text>
						</Text>
						<Text name='Next Break' template='EVESkin.Font.Description'>
							<X>10</X>
							<Y>95</Y>
							<Width>175</Width>
							<Height>20</Height>
							<Text>Next Break:</Text>
						</Text>
						<Text name='NextBreakDATA' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>95</Y>
							<Width>150</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.Social.NextBreakTime}</Text>
						</Text>
						<Text name='Break Over' template='EVESkin.Font.Description'>
							<X>10</X>
							<Y>110</Y>
							<Width>175</Width>
							<Height>20</Height>
							<Text>Break Over:</Text>
						</Text>
						<Text name='BreakOverDATA' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>110</Y>
							<Width>150</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.Social.RestartTime}</Text>
						</Text>
						<console Name="StatusConsole" template='EVESkin.Console'>
							<X>5</X>
							<Y>r120</Y>
							<Width>97.5%</Width>
							<Height>115</Height>
						</console>
					</Tab>
					<Tab Name='Main'>
						<Text name='EVEBotModeLabel'>
							<X>10</X>
							<Y>10</Y>
							<Width>70</Width>
							<Height>10</Height>
							<Text>Bot Mode</Text>
						</Text>
						<combobox name='EVEBotMode'>
							<X>80</X>
							<Y>10</Y>
							<Width>250</Width>
							<Height>15</Height>
							<FullHeight>200</FullHeight>
							<ButtonWidth>20</ButtonWidth>
							<Items>
								<Item Value='4'>Ratter</Item>
							</Items>
							<OnSelect>
								Script[EVEBot].VariableScope.Config.Common:SetBotMode[${This.SelectedItem.Value}]
								Script[EVEBot].VariableScope.Config.Common:SetBotModeName[${This.SelectedItem.Text}]
							</OnSelect>
							<OnLoad>
								This:SetSelection[${Script[EVEBot].VariableScope.Config.Common.BotMode}]
							</OnLoad>
						</combobox>
						<Textentry name='MinimumDronesInBay'>
							<X>10</X>
							<Y>30</Y>
							<Width>32</Width>
							<Height>18</Height>
							<MaxLength>2</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Common.DronesInBay}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Common:SetDronesInBay[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='MinimumDronesInBayText'>
							<X>44</X>
							<Y>30</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Minimum Drones in Bay</Text>
							<AutoTooltip>This will set the amount of drones you want in your drone bay.</AutoTooltip>
						</Text>
						<Text name='lblMaxRuntime'>
							<X>10</X>
							<Y>130</Y>
							<Width>130</Width>
							<Height>18</Height>
							<Text>Maximum Runtime</Text>
							<AutoTooltip>The maximum time in hours to run the script before it aborts.</AutoTooltip>
						</Text>
						<Textentry name='tbMaxRuntime'>
							<X>140</X>
							<Y>130</Y>
							<Width>32</Width>
							<Height>18</Height>
							<MaxLength>3</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Common.MaxRuntime}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Common:SetMaxRuntime[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblIRCServer'>
							<X>10</X>
							<Y>160</Y>
							<Width>100</Width>
							<Height>18</Height>
							<Text>IRC Server</Text>
							<AutoTooltip>Enter an server address if you want to use IRC</AutoTooltip>
						</Text>
						<Textentry name='tbIRCServer'>
							<X>140</X>
							<Y>160</Y>
							<Width>200</Width>
							<Height>18</Height>
							<MaxLength>50</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Common.IRCServer}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Common:SetIRCServer[${This.Text}]
								}
							</OnChange>
						</Textentry>

						<Text name='lblIRCChannel'>
							<X>10</X>
							<Y>180</Y>
							<Width>100</Width>
							<Height>18</Height>
							<Text>IRC Channel</Text>
							<AutoTooltip>Enter an channel name if you want to use IRC</AutoTooltip>
						</Text>
						<Textentry name='tbIRCChannel'>
							<X>140</X>
							<Y>180</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>25</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Common.IRCChannel}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Common:SetIRCChannel[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblIRCUser'>
							<X>10</X>
							<Y>200</Y>
							<Width>100</Width>
							<Height>18</Height>
							<Text>IRC Username</Text>
							<AutoTooltip>Enter an username if you want to use IRC</AutoTooltip>
						</Text>
						<Textentry name='tbIRCUser'>
							<X>140</X>
							<Y>200</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>25</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Common.IRCUser}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Common:SetIRCUser[${This.Text}]
								}
							</OnChange>
						</Textentry>

						<Text name='lblIRCPassword'>
							<X>10</X>
							<Y>220</Y>
							<Width>100</Width>
							<Height>18</Height>
							<Text>IRC Password</Text>
							<AutoTooltip>Enter a password if you need one to use IRC</AutoTooltip>
						</Text>
						<Textentry name='tbIRCPassword'>
							<X>140</X>
							<Y>220</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>25</MaxLength>
							<PasswordCharacter>*</PasswordCharacter>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Common.IRCPassword}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Common:SetIRCPassword[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<checkbox Name='cbUseSound'>
							<X>10</X>
							<Y>240</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Enable sound</Text>
							<AutoTooltip>Enable audio events</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Common.UseSound}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Common:SetUseSound[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='cbDisable3D'>
							<X>110</X>
							<Y>240</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Disable 3D Rendering</Text>
							<AutoTooltip>Disable EVE 3D Rendering</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Common.Disable3D}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Common:SetDisable3D[${This.Checked}]
							</OnLeftClick>
						</checkbox>
					</Tab>
					<Tab name='Combat'>
						<checkbox name='cbAlwaysShieldBoost'>
							<X>10</X>
							<Y>10</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Always Shield Boost</Text>
							<AutoTooltip>Turn Shield Booster on full-time, instead of on-demand.</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.AlwaysShieldBoost}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetAlwaysShieldBoost[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbLaunchCombatDrones'>
							<X>10</X>
							<Y>30</Y>
							<Height>20</Height>
							<Width>130</Width>
							<Text>Launch Combat Drones</Text>
							<AutoTooltip>Launch and Use Combat Drones</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.LaunchCombatDrones}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetLaunchCombatDrones[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbChainSpawns'>
							<X>10</X>
							<Y>50</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Chain Spawns</Text>
							<AutoTooltip>Will chain high value spawns if checked</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.ChainSpawns}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetChainSpawns[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbChainSolo'>
							<X>10</X>
							<Y>70</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Also Chain While Alone</Text>
							<AutoTooltip>If not checked chaining will be suspended if you are alone in a system.</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.ChainSolo}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetChainSolo[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbAnomalyAssistMode'>
							<X>10</X>
							<Y>90</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Use AnomalyAssistMode</Text>
							<AutoTooltip>Keeps the ratter stationary, ignores belts and players</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.AnomalyAssistMode}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetAnomalyAssistMode[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbReloadFromCan'>
							<X>10</X>
							<Y>110</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Restock Ammo From GSC</Text>
							<AutoTooltip>Warp to Ammo Bookmark to restock ammunition?</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.RestockAmmo}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetRestockAmmo[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbOrbit'>
							<X>10</X>
							<Y>130</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Orbit NPC Targets</Text>
							<AutoTooltip>Orbit the current NPC target?</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.Orbit}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetOrbit[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbOrbitAtOptimal'>
							<X>10</X>
							<Y>150</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Calculate Optimal (lasers only)</Text>
							<AutoTooltip>Attempt to calculate optimal?</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.OrbitAtOptimal}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetOrbitAtOptimal[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbKeepAtRange'>
							<X>10</X>
							<Y>170</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>KeepAtRange NPC Targets</Text>
							<AutoTooltip>KeepAtRange the current NPC target?</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.KeepAtRange}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetKeepAtRange[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbKeepAtRangeAtOptimal'>
							<X>10</X>
							<Y>190</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Calculate Optimal (lasers only)</Text>
							<AutoTooltip>Attempt to calculate optimal?</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.KeepAtRangeAtOptimal}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetKeepAtRangeAtOptimal[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbLootMyKills'>
							<X>10</X>
							<Y>210</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Loot My Kills</Text>
							<AutoTooltip>Loot the rats you kill</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.LootMyKills}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetLootMyKills[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbSkipFight'>
							<X>10</X>
							<Y>230</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Skip Fighting</Text>
							<AutoTooltip>Skips Fight step</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.SkipFight}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetSkipFight[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Text name='MinimumDronesInSpaceText'>
							<X>200</X>
							<Y>10</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Min. Available Drones</Text>
							<AutoTooltip>We will return to base when available drones falls below this number</AutoTooltip>
						</Text>
						<Textentry name='MinimumDronesInSpace'>
							<X>375</X>
							<Y>10</Y>
							<Width>32</Width>
							<Height>18</Height>
							<MaxLength>2</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.MinimumDronesInSpace}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetMinimumDronesInSpace[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='WarpRangeText'>
							<X>200</X>
							<Y>30</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Belt Warp Range (m)</Text>
							<AutoTooltip>What range to warp to belts at. Default is 0</AutoTooltip>
						</Text>
						<Textentry name='WarpRange'>
							<X>350</X>
							<Y>30</Y>
							<Width>100</Width>
							<Height>18</Height>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.WarpRange}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetWarpRange[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblMinChainBounty'>
							<X>200</X>
							<Y>50</Y>
							<Width>200</Width>
							<Height>18</Height>
							<Text>Min Chain Bounty</Text>
							<AutoTooltip>NPC ships with a bounty above this value will be chained (if enabled).</AutoTooltip>
						</Text>
						<Textentry name='tbMinChainBounty'>
							<X>350</X>
							<Y>50</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.MinChainBounty}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetMinChainBounty[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblOrbitDistance'>
							<X>200</X>
							<Y>70</Y>
							<Width>200</Width>
							<Height>18</Height>
							<Text>Orbit Distance (m)</Text>
							<AutoTooltip>Distance you want to orbit the current target</AutoTooltip>
						</Text>
						<Textentry name='tbOrbitDistance'>
							<X>350</X>
							<Y>70</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.OrbitDistance}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetOrbitDistance[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblKeepAtRangeDistance'>
							<X>200</X>
							<Y>90</Y>
							<Width>200</Width>
							<Height>18</Height>
							<Text>KeepAtRange Distance (m)</Text>
							<AutoTooltip>Distance you want to Keep the current target At Range</AutoTooltip>
						</Text>
						<Textentry name='tbKeepAtRangeDistance'>
							<X>350</X>
							<Y>90</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.KeepAtRangeDistance}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetKeepAtRangeDistance[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblAmmoTypeID'>
							<X>200</X>
							<Y>110</Y>
							<Width>110</Width>
							<Height>18</Height>
							<Text>Ammo TypeID</Text>
							<AutoTooltip>Name of bookmark where the ammo can is located.</AutoTooltip>
						</Text>
						<Textentry name='tbAmmoTypeID'>
							<X>350</X>
							<Y>110</Y>
							<Width>150</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.AmmoTypeID}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetAmmoTypeID[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblRestockFreeSpace'>
							<X>200</X>
							<Y>130</Y>
							<Width>120</Width>
							<Height>18</Height>
							<Text>Ammo Free Cargo</Text>
							<AutoTooltip>How much free space to leave in cargo after restocking ammo</AutoTooltip>
						</Text>
						<Textentry name='tbRestockFreeSpace'>
							<X>350</X>
							<Y>130</Y>
							<Width>150</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.RestockAmmoFreeSpace}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetRestockAmmoFreeSpace[${This.Text}]
								}
							</OnChange>
						</Textentry>
					</Tab>
					<Tab name='Fleeing'>
						<TabControl Name='FleeingTabcontrol' template='EVESkin.TabControl'>
							<x>0</x>
							<y>0</y>
							<width>100%</width>
							<height>100%</height>
							<Tabs>
								<Tab name='Options'>
									<frame name='FleeingFrame'>
										<x>0</x>
										<y>0</y>
										<width>100%</width>
										<height>100%</height>
										<children>
											<checkbox name='cbRunOnLowAmmo'>
												<X>10</X>
												<Y>10</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Run On Low Ammo</Text>
												<AutoTooltip>If checked, run to safe spot when low on ammo.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.RunOnLowAmmo}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetRunOnLowAmmo[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbRunOnLowCap'>
												<X>10</X>
												<Y>30</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Run On Low Cap</Text>
												<AutoTooltip>If checked, run to safe spot when capacitor is empty.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.RunOnLowCap}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetRunOnLowCap[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbRunOnLowTank'>
												<X>10</X>
												<Y>50</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Run On Low Tank</Text>
												<AutoTooltip>If checked, run to safe spot when tank (shield or armor) has failed.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.RunOnLowTank}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetRunOnLowTank[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbRunToStation'>
												<X>10</X>
												<Y>70</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Run To Station</Text>
												<AutoTooltip>If checked, run to a station instead of a safe-spot.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.RunToStation}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetRunToStation[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbUseWhiteList'>
												<X>10</X>
												<Y>90</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Run On Non-Whitelisted Pilot</Text>
												<AutoTooltip>If checked, run to safe spot when any non-whitelisted pilot enters system.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.UseWhiteList}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetUseWhiteList[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbWLBypassStandings'>
												<X>50%</X>
												<Y>90</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Whitelist bypasses standings</Text>
												<AutoTooltip>If checked, "bad" standings will be checked for whitelisting before fleeing.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.WLBypassStandings}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetWLBypassStandings[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbUseBlackList'>
												<X>10</X>
												<Y>110</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Run On Blacklisted Pilot</Text>
												<AutoTooltip>If checked, run to safe spot when any blacklisted pilot enters system.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.UseBlackList}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetUseBlackList[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<combobox name='cbLowestStandingCombat'>
												<X>10</X>
												<Y>130</Y>
												<Width>50</Width>
												<Height>15</Height>
												<FullHeight>200</FullHeight>
												<ButtonWidth>20</ButtonWidth>
												<Items>
													<Item Value='-11'>-11</Item>
													<Item Value='-10'>-10</Item>
													<Item Value='-5'>-5</Item>
													<Item Value='0'>0</Item>
													<Item Value='5'>5</Item>
													<Item Value='10'>10</Item>
												</Items>
												<OnSelect>
													Script[EVEBot].VariableScope.Config.Combat:SetLowestStanding[${This.SelectedItem.Value}]
												</OnSelect>
												<OnLoad>
													This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.LowestStanding}].ID}]
												</OnLoad>
											</combobox>
											<Text name='lblLowestStandingCombat'>
												<X>65</X>
												<Y>130</Y>
												<Width>200</Width>
												<Height>18</Height>
												<Text>Min Acceptable Standing</Text>
												<AutoTooltip>The lowest standing pilot we tolerate in system before we flee. It goes to -11!</AutoTooltip>
											</Text>
											<checkbox name='cbIncludeNeutralInCalc'>
												<X>250</X>
												<Y>127</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Include Neutral (0.0) standings in standings check</Text>
												<AutoTooltip>If checked, include all 0.0 standings (includes corp, alliance, and personal)</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.IncludeNeutralInCalc}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetIncludeNeutralInCalc[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<slider name='MinArmorPct'>
												<X>210</X>
												<Y>10</Y>
												<Width>40</Width>
												<Height>18</Height>
												<Range>100</Range>
												<OnLoad>
													This:SetValue[${Script[EVEBot].VariableScope.Config.Combat.MinimumArmorPct}]
													UIElement[EVEBot].FindUsableChild[MinArmorPctLabel,Text]:SetText["Minimum Armor: ${This.Value}"]
												</OnLoad>
												<OnChange>
													Script[EVEBot].VariableScope.Config.Combat:SetMinimumArmorPct[${Int[${This.Value}]}]
													UIElement[EVEBot].FindUsableChild[MinArmorPctLabel,Text]:SetText["Minimum Armor: ${This.Value}"]
												</OnChange>
											</slider>
											<Text name='MinArmorPctLabel'>
												<X>255</X>
												<Y>10</Y>
												<Width>150</Width>
												<Height>10</Height>
												<Text>Minimum Armor: 0</Text>
												<AutoTooltip>Lowest armor percent allowed before fleeing</AutoTooltip>
												<OnLoad>
													This:SetText["Minimum Armor: ${UIElement[EVEBot].FindUsableChild[MinArmorPct,slider].Value}"]
												</OnLoad>
											</Text>
											<slider name='MinShieldPct'>
												<X>210</X>
												<Y>30</Y>
												<Width>40</Width>
												<Height>18</Height>
												<Range>100</Range>
												<OnLoad>
													This:SetValue[${Script[EVEBot].VariableScope.Config.Combat.MinimumShieldPct}]
													UIElement[EVEBot].FindUsableChild[MinShieldPctLabel,Text]:SetText["Minimum Shield: ${This.Value}"]
												</OnLoad>
												<OnChange>
													Script[EVEBot].VariableScope.Config.Combat:SetMinimumShieldPct[${Int[${This.Value}]}]
													UIElement[EVEBot].FindUsableChild[MinShieldPctLabel,Text]:SetText["Minimum Shield: ${This.Value}"]
												</OnChange>
											</slider>
											<Text name='MinShieldPctLabel'>
												<X>255</X>
												<Y>30</Y>
												<Width>150</Width>
												<Height>10</Height>
												<Text>Minimum Shield: 0</Text>
												<AutoTooltip>Lowest Shield Pct Allowed before Running</AutoTooltip>
												<OnLoad>
													This:SetText["Minimum Shield: ${UIElement[EVEBot].FindUsableChild[MinShieldPct,slider].Value}"]
												</OnLoad>
											</Text>
											<slider name='MinCapPct'>
												<X>210</X>
												<Y>50</Y>
												<Width>40</Width>
												<Height>18</Height>
												<Range>100</Range>
												<OnLoad>
													This:SetValue[${Script[EVEBot].VariableScope.Config.Combat.MinimumCapPct}]
													UIElement[EVEBot].FindUsableChild[MinCapPctLabel,Text]:SetText["Minimum Cap: ${This.Value}"]
												</OnLoad>
												<OnChange>
													Script[EVEBot].VariableScope.Config.Combat:SetMinimumCapPct[${Int[${This.Value}]}]
													UIElement[EVEBot].FindUsableChild[MinCapPctLabel,Text]:SetText["Minimum Cap: ${This.Value}"]
												</OnChange>
											</slider>
											<Text name='MinCapPctLabel'>
												<X>255</X>
												<Y>50</Y>
												<Width>150</Width>
												<Height>10</Height>
												<Text>Minimum Cap: 0</Text>
												<AutoTooltip>Lowest capacitor percent allowed before fleeing</AutoTooltip>
												<OnLoad>
													This:SetText["Minimum Cap: ${UIElement[EVEBot].FindUsableChild[MinCapPct,slider].Value}"]
												</OnLoad>
											</Text>
											<checkbox name='cbBreaks'>
												<X>10</X>
												<Y>180</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Take a break for               hours every                hours.</Text>
												<AutoTooltip>If checked, will dock your ship at your panic location every for a break according to the information specified.  Restart after changing these values.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.TakeBreaks}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetTakeBreaks[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<combobox name='comboBreakDuration'>
												<X>125</X>
												<Y>180</Y>
												<Width>50</Width>
												<Height>15</Height>
												<FullHeight>200</FullHeight>
												<ButtonWidth>20</ButtonWidth>
												<Items>
													<Item Value='1'>1</Item>
													<Item Value='2'>2</Item>
												</Items>
												<OnSelect>
													Script[EVEBot].VariableScope.Config.Combat:SetBreakDuration[${This.SelectedItem.Value}]
												</OnSelect>
												<OnLoad>
													This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.BreakDuration}].ID}]
												</OnLoad>
											</combobox>
											<combobox name='comboTimeBetweenBreaks'>
												<X>250</X>
												<Y>180</Y>
												<Width>50</Width>
												<Height>15</Height>
												<FullHeight>200</FullHeight>
												<ButtonWidth>20</ButtonWidth>
												<Items>
													<Item Value='1'>1</Item>
													<Item Value='2'>2</Item>
													<Item Value='3'>3</Item>
													<Item Value='4'>4</Item>
													<Item Value='5'>5</Item>
													<Item Value='6'>6</Item>
												</Items>
												<OnSelect>
													Script[EVEBot].VariableScope.Config.Combat:SetTimeBetweenBreaks[${This.SelectedItem.Value}]
												</OnSelect>
												<OnLoad>
													This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.TimeBetweenBreaks}].ID}]
												</OnLoad>
											</combobox>
											<checkbox name='cbBreakBroadcast'>
												<X>20</X>
												<Y>200</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Relay break to all sessions</Text>
												<AutoTooltip>If checked, will broadcast break to all sessions.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.BroadcastBreaks}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetBroadcastBreaks[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbSafeCooldown'>
												<X>10</X>
												<Y>150</Y>
												<Height>20</Height>
												<Width>20</Width>
												<Text>Wait               minutes after unsafe pilots have left system</Text>
												<AutoTooltip>If checked, will dock your ship at your panic location every for a break according to the information specified.  Restart after changing these values.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.UseSafeCooldown}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetUseSafeCooldown[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<combobox name='comboSafeCooldown'>
												<X>60</X>
												<Y>150</Y>
												<Width>50</Width>
												<Height>15</Height>
												<FullHeight>200</FullHeight>
												<ButtonWidth>20</ButtonWidth>
												<Items>
													<Item Value='5'>5</Item>
													<Item Value='10'>10</Item>
													<Item Value='20'>20</Item>
													<Item Value='30'>30</Item>
													<Item Value='40'>40</Item>
													<Item Value='60'>60</Item>
												</Items>
												<OnSelect>
													Script[EVEBot].VariableScope.Config.Combat:SetSafeCooldown[${This.SelectedItem.Value}]
												</OnSelect>
												<OnLoad>
													This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.SafeCooldown}].ID}]
												</OnLoad>
											</combobox>
										</children>
									</frame>
								</Tab>
								<Tab Name='Whitelist'>
									<text name='lblWLLocal'>
										<x>10</x>
										<y>10</y>
										<width>150</width>
										<height>10</height>
										<text>Local</text>
									</text>
									<listbox name='lbWLLocal'>
										<!-- TODO: on click, update selected info; name, corp, alliance, tooltips, etc. -->
										<x>10</x>
										<y>25</y>
										<width>130</width>
										<height>200</height>
										<sort>text</sort>
										<OnLeftClick>
											variable string pilotinfo=${UIElement[EVEBot].FindUsableChild[txtPilotInfo,text].FullName}
											variable string corpinfo=${UIElement[EVEBot].FindUsableChild[txtCorpInfo,text].FullName}
											variable string allianceinfo=${UIElement[EVEBot].FindUsableChild[txtAllianceInfo,text].FullName}
											variable pilot p = ${Local[${This.SelectedItem[1].Text}]}
											UIElement[${pilotinfo}]:SetText[Pilot: ${p.Name} (${p.CharID})]
											UIElement[${corpinfo}]:SetText[Corp ID: ${p.Corp.ID}]
											UIElement[${allianceinfo}]:SetText[Alliance: ${p.Alliance} (${p.AllianceID})]
										</OnLeftClick>

									</listbox>
									<button name='btnWLRefresh' template='EveSkin.Window.ClickButton'>
										<x>20</x>
										<y>235</y>
										<width>110</width>
										<height>22</height>
										<text>Refresh</text>
										<OnLeftClick>
											variable string lbname = ${UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox].FullName}
											variable index:pilot pilots
											variable iterator piter
											EVE:GetLocalPilots[pilots]
											pilots:GetIterator[piter]
											variable string pilotinfo=${UIElement[EVEBot].FindUsableChild[txtPilotInfo,text].FullName}
											variable string corpinfo=${UIElement[EVEBot].FindUsableChild[txtCorpInfo,text].FullName}
											variable string allianceinfo=${UIElement[EVEBot].FindUsableChild[txtAllianceInfo,text].FullName}
											UIElement[${pilotinfo}]:SetText[""]
											UIElement[${corpinfo}]:SetText[""]
											UIElement[${allianceinfo}]:SetText[""]

											UIElement[${lbname}]:ClearItems
											if ${piter:First(exists)}
											{
											do
											{
											if !${piter.Value.CharID.Equal[${Me.CharID}]}
											UIElement[${lbname}]:AddItem[${piter.Value.Name}]
											}
											while ${piter:Next(exists)}
											}
											UIElement[${lbname}]:Sort

										</OnLeftClick>
									</button>
									<!-- Pilots -->
									<text name='lblWLPilots'>
										<x>r140</x>
										<y>10</y>
										<width>130</width>
										<height>10</height>
										<text>Pilot</text>
									</text>
									<listbox name='lbWLPilots'>
										<x>r140</x>
										<y>25</y>
										<width>130</width>
										<height>60</height>
										<sort>text</sort>
										<OnLoad>
											This:RightClick
										</OnLoad>
										<OnLeftClick>
											UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox]:ClearSelection
											variable string pilotinfo=${UIElement[EVEBot].FindUsableChild[txtPilotInfo,text].FullName}
											variable string corpinfo=${UIElement[EVEBot].FindUsableChild[txtCorpInfo,text].FullName}
											variable string allianceinfo=${UIElement[EVEBot].FindUsableChild[txtAllianceInfo,text].FullName}
											UIElement[${pilotinfo}]:SetText[Pilot: ${This.SelectedItem[1].Text} ${This.SelectedItem[1].Value}]
											UIElement[${corpinfo}]:SetText[""]
											UIElement[${allianceinfo}]:SetText[""]
										</OnLeftClick>
										<OnRightClick>
											This:ClearItems
											variable iterator i
											Script[EVEBot].VariableScope.Whitelist.PilotsRef:GetSettingIterator[i]
											if ${i:First(exists)}
											{
											do
											{
											This:AddItem[${i.Key},${i.Value}]
											}
											while ${i:Next(exists)}
											}
											This:Sort
										</OnRightClick>
									</listbox>
									<button name='btnWLDelPilot' template='EveSkin.Window.ClickButton'>
										<x>r170</x>
										<y>35</y>
										<width>30</width>
										<height>40</height>
										<text>Del</text>
										<OnLeftClick>
											variable string pilotname=${UIElement[EVEBot].FindUsableChild[lbWLPilots,listbox].SelectedItem[1].Text}
											variable int64 pilotid=${UIElement[EVEBot].FindUsableChild[lbWLPilots,listbox].SelectedItem[1].Value}
											Script[EVEBot].VariableScope.Social:DelWhiteList[Pilot,${pilotid},${pilotname}]
											UIElement[EVEBot].FindUsableChild[lbWLPilots,listbox]:RightClick

										</OnLeftClick>
									</button>
									<button name='btnWLAddPilot' template='EveSkin.Window.ClickButton'>
										<x>r200</x>
										<y>35</y>
										<width>30</width>
										<height>40</height>
										<text>Add</text>
										<OnLeftClick>
											variable string pilotname=${UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox].SelectedItem[1].Text}
											variable int64 pilotid=${Local[${pilotname}].CharID}
											if !${pilotid.Equal[0]}
											{
											Script[EVEBot].VariableScope.Social:AddWhiteList[Pilot,${pilotid},${pilotname}]
											}
											UIElement[EVEBot].FindUsableChild[lbWLPilots,listbox]:RightClick
										</OnLeftClick>
									</button>
									<!-- Corps -->
									<text name='lblWLCorps'>
										<x>r140</x>
										<y>90</y>
										<width>130</width>
										<height>10</height>
										<text>Corp</text>
									</text>
									<listbox name='lbWLCorps'>
										<x>r140</x>
										<y>105</y>
										<width>130</width>
										<height>60</height>
										<sort>text</sort>
										<OnLoad>
											This:RightClick
										</OnLoad>
										<OnLeftClick>
											UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox]:ClearSelection
											variable string pilotinfo=${UIElement[EVEBot].FindUsableChild[txtPilotInfo,text].FullName}
											variable string corpinfo=${UIElement[EVEBot].FindUsableChild[txtCorpInfo,text].FullName}
											variable string allianceinfo=${UIElement[EVEBot].FindUsableChild[txtAllianceInfo,text].FullName}
											UIElement[${pilotinfo}]:SetText[""]
											UIElement[${corpinfo}]:SetText[Corp: ${This.SelectedItem[1].Text} ${This.SelectedItem[1].Value}]
											UIElement[${allianceinfo}]:SetText[""]
										</OnLeftClick>
										<OnRightClick>
											This:ClearItems
											variable iterator i
											Script[EVEBot].VariableScope.Whitelist.CorporationsRef:GetSettingIterator[i]
											if ${i:First(exists)}
											{
											do
											{
											This:AddItem[${i.Key},${i.Value}]
											}
											while ${i:Next(exists)}
											}
											This:Sort
										</OnRightClick>

									</listbox>
									<button name='btnWLDelCorp' template='EveSkin.Window.ClickButton'>
										<x>r170</x>
										<y>115</y>
										<width>30</width>
										<height>40</height>
										<text>Del</text>
										<OnLeftClick>
											variable string corpname=${UIElement[EVEBot].FindUsableChild[lbWLCorps,listbox].SelectedItem[1].Text}
											variable int64 corpid=${UIElement[EVEBot].FindUsableChild[lbWLCorps,listbox].SelectedItem[1].Value}
											Script[EVEBot].VariableScope.Social:DelWhiteList[Corporation,${corpid},${corpname}]
											UIElement[EVEBot].FindUsableChild[lbWLCorps,listbox]:RightClick
										</OnLeftClick>
									</button>
									<button name='btnWLAddCorp' template='EveSkin.Window.ClickButton'>
										<x>r200</x>
										<y>115</y>
										<width>30</width>
										<height>40</height>
										<text>Add</text>
										<OnLeftClick>
											variable string pilotname=${UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox].SelectedItem[1].Text}
											variable int64 corpid=${Local[${pilotname}].Corp.ID}
											if !${pilotid.Equal[0]}
											{
											Script[EVEBot].VariableScope.Social:AddWhiteList[Corporation,${corpid},(${pilotname}) ${corpid}]
											}
											UIElement[EVEBot].FindUsableChild[lbWLCorps,listbox]:RightClick
										</OnLeftClick>
									</button>
									<!-- Alliances -->
									<text name='lblWLAlliances'>
										<x>r140</x>
										<y>170</y>
										<width>130</width>
										<height>10</height>
										<text>Alliance</text>
									</text>
									<listbox name='lbWLAlliances'>
										<x>r140</x>
										<y>185</y>
										<width>130</width>
										<height>60</height>
										<sort>text</sort>
										<OnLoad>
											This:RightClick
										</OnLoad>
										<OnLeftClick>
											UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox]:ClearSelection
											variable string pilotinfo=${UIElement[EVEBot].FindUsableChild[txtPilotInfo,text].FullName}
											variable string corpinfo=${UIElement[EVEBot].FindUsableChild[txtCorpInfo,text].FullName}
											variable string allianceinfo=${UIElement[EVEBot].FindUsableChild[txtAllianceInfo,text].FullName}
											UIElement[${pilotinfo}]:SetText[""]
											UIElement[${corpinfo}]:SetText[""]
											UIElement[${allianceinfo}]:SetText[Alliance: ${This.SelectedItem[1].Text} ${This.SelectedItem[1].Value}]
										</OnLeftClick>
										<OnRightClick>
											This:ClearItems
											variable iterator i
											Script[EVEBot].VariableScope.Whitelist.AlliancesRef:GetSettingIterator[i]
											if ${i:First(exists)}
											{
											do
											{
											This:AddItem[${i.Key},${i.Value}]
											}
											while ${i:Next(exists)}
											}
											This:Sort
										</OnRightClick>
									</listbox>
									<button name='btnWLDelAlliance' template='EveSkin.Window.ClickButton'>
										<x>r170</x>
										<y>195</y>
										<width>30</width>
										<height>40</height>
										<text>Del</text>
										<OnLeftClick>
											variable string alliancename=${UIElement[EVEBot].FindUsableChild[lbWLAlliances,listbox].SelectedItem[1].Text}
											variable int64 allianceid=${UIElement[EVEBot].FindUsableChild[lbWLAlliances,listbox].SelectedItem[1].Value}
											Script[EVEBot].VariableScope.Social:DelWhiteList[Alliance,${allianceid},${alliancename}]
											UIElement[EVEBot].FindUsableChild[lbWLAlliances,listbox]:RightClick
										</OnLeftClick>
									</button>
									<button name='btnWLAddAlliance' template='EveSkin.Window.ClickButton'>
										<x>r200</x>
										<y>195</y>
										<width>30</width>
										<height>40</height>
										<text>Add</text>
										<OnLeftClick>
											variable string pilotname=${UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox].SelectedItem[1].Text}
											variable int64 allianceid=${Local[${pilotname}].AllianceID}
											if !${pilotid.Equal[0]}
											{
											Script[EVEBot].VariableScope.Social:AddWhiteList[Alliance,${allianceid},(${pilotname}) ${allianceid}]
											}
											UIElement[EVEBot].FindUsableChild[lbWLAlliances,listbox]:RightClick
										</OnLeftClick>
									</button>
									<!-- Display of relevant info for local-selected, or list-selected item. -->
									<Text Name='txtPilotInfo'>
										<x>150</x>
										<y>25</y>
										<width>r355</width>
										<height>60</height>
										<wrap />
										<text>Select a pilot from the list at left.</text>
									</text>
									<Text Name='txtCorpInfo'>
										<x>150</x>
										<y>105</y>
										<width>r355</width>
										<height>60</height>
										<wrap />
										<text>This will populate with stuff based on your selection.</text>
									</text>
									<Text Name='txtAllianceInfo'>
										<x>150</x>
										<y>185</y>
										<width>r355</width>
										<height>60</height>
										<wrap />
										<text>This will show you alliance stuff.</text>
									</text>

									<button name='btnSyncWhitelists' template='EveSkin.Window.ClickButton'>
										<x>150</x>
										<y>r30</y>
										<width>r355</width>
										<height>20</height>
										<text>Synchronize Whitelist</text>
										<OnLeftClick>
											Script[EVEBot].VariableScope.Social:SyncWhitelist
										</OnLeftClick>
									</button>

								</Tab>

							</Tabs>
						</TabControl>
					</Tab>
					<Tab name='Labels'>
						<Text name='Label1'>
							<X>10</X>
							<Y>10</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Bookmark Prefixes</Text>
						</Text>
						<Text name='SafeSpotsLabel'>
							<X>25</X>
							<Y>25</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Safe Spots</Text>
							<AutoTooltip>The prefix for safe spot bookmark names.</AutoTooltip>
						</Text>
						<Textentry name='SafeSpotPrefix'>
							<X>230</X>
							<Y>25</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Labels.SafeSpotPrefix}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Labels:SetSafeSpotPrefix[${This.Text}]
								}
								else
								{
								Script[EVEBot].VariableScope.Config.Labels:SetSafeSpotPrefix[""]
								}
							</OnChange>
						</Textentry>
						<Text name='BeltBookMarkLabel'>
							<X>25</X>
							<Y>40</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Ore Belts</Text>
							<AutoTooltip>The prefix for ore belt bookmark names.</AutoTooltip>
						</Text>
						<Textentry name='BeltBookMarkPrefix'>
							<X>230</X>
							<Y>40</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Labels.OreBeltPrefix}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Labels:SetOreBeltPrefix[${This.Text}]
								}
								else
								{
								Script[EVEBot].VariableScope.Config.Labels:SetOreBeltPrefix[""]
								}
							</OnChange>
						</Textentry>
						<Text name='IceBeltBookMarkLabel'>
							<X>25</X>
							<Y>55</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Ice Belts</Text>
							<AutoTooltip>The prefix for ice belt bookmark names.</AutoTooltip>
						</Text>
						<Textentry name='IceBeltBookMarkPrefix'>
							<X>230</X>
							<Y>55</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Labels.IceBeltPrefix}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Labels:SetIceBeltPrefix[${This.Text}]
								}
								else
								{
								Script[EVEBot].VariableScope.Config.Labels:SetIceBeltPrefix[""]
								}
							</OnChange>
						</Textentry>
						<Text name='AmmoBookMarkLabel'>
							<X>25</X>
							<Y>70</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Ammo Supplies</Text>
							<AutoTooltip>The prefix for Ammo bookmark names.</AutoTooltip>
						</Text>
						<Textentry name='AmmoBookMarkPrefix'>
							<X>230</X>
							<Y>70</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Labels.AmmoPrefix}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Labels:SetAmmoPrefix[${This.Text}]
								}
								else
								{
								Script[EVEBot].VariableScope.Config.Labels:SetAmmoPrefix[""]
								}
							</OnChange>
						</Textentry>
					</Tab>
				</Tabs>
			</TabControl>
		</Children>
	</window>
</ISUI>
